{"version":3,"sources":["InfoBox.js","main.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","props","Card","className","isRed","isGreen","onClick","CardContent","Typography","color","title","style","caseColor","increment","total","casesTypeColors","cases","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","Map","countries","type","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","src","flag","numeral","format","active","showDataOnMap","Table","worldTotal","options","legend","display","elements","points","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","countryCode","useState","setData","obtained","setObtained","buildChartData","lastDataPoint","chartData","date","newPoint","x","y","push","useEffect","fetch","then","response","json","Object","keys","length","fetchData","datasets","backgroundColor","borderColor","App","setCountries","setCountry","info","setInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","caseType","setCaseType","worldWideCases","setWorldWideCases","name","code","iso3","getCountriesData","countryChange","event","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.010ecc6e.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography} from '@material-ui/core'\r\nimport './InfoBox.css'\r\n\r\nfunction InfoBox(props) {\r\n    return (\r\n        <Card \r\n            className={`card_info ${props.isRed && 'box-red'} ${props.isGreen && 'box-green'}`} \r\n            onClick={props.onClick}>\r\n            <CardContent>\r\n                {/* Title */}\r\n                <Typography color='primary'>{props.title}</Typography>\r\n\r\n                {/* increment */}\r\n                <h2 className='box_increment' style={{color: props.caseColor}}>+{props.increment}</h2>\r\n\r\n                {/* total */}\r\n                <Typography className='box_total'><span className='upper'>{props.total}</span> Total</Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react'\r\nimport numeral from \"numeral\"\r\nimport { Circle, Popup } from \"react-leaflet\"\r\n\r\nexport const casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        color: \"rgba(204, 16, 52, 0.4)\",\r\n        multiplier: 900,\r\n    },\r\n    recovered: {\r\n        hex: \"#73cf11\",\r\n        color: \"rgba(115, 207, 17, 0.4)\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        color: \"rgba(251, 68, 67, 0.4)\",\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data]\r\n\r\n    sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1);\r\n    return sortedData;\r\n}\r\n\r\nexport const showDataOnMap = (data, type = 'cases') => (\r\n    data.map((country) => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[type].hex}\r\n            fillColor={casesTypeColors[type].hex}\r\n            radius={\r\n                Math.sqrt(country[type]) * casesTypeColors[type].multiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div className='popup_country'>\r\n                    <div className='popup_text'>{country.country}</div>\r\n                    <img className='popup_country_flag' src={country.countryInfo.flag}></img>\r\n                </div>\r\n                <div className='popup_text'><strong>Total Cases:</strong> {numeral(country.cases).format(\"0,0\")}</div>\r\n                <div className='popup_text'><strong>Active Cases:</strong> {numeral(country.active).format(\"0,0\")}</div>\r\n                <div className='popup_text'><strong>Recovered:</strong> {numeral(country.recovered).format(\"0,0\")}</div>\r\n                <div className='popup_text'><strong>Deaths:</strong> {numeral(country.deaths).format(\"0,0\")}</div>\r\n            </Popup>\r\n\r\n        </Circle>\r\n    ))\r\n);\r\n","import React from 'react'\r\nimport './Map.css';\r\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet'\r\nimport { showDataOnMap } from './main'\r\n\r\n\r\nfunction Map({countries, type, center, zoom }) {\r\n    return (\r\n        <div className='map'>\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n                />\r\n                {showDataOnMap(countries, type)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css'\r\nimport numeral from \"numeral\"\r\n\r\nfunction Table(props) {\r\n    return (\r\n        <div className='table'>\r\n            <tr>\r\n                <td>Worldwide</td>\r\n                <td>{numeral(props.worldTotal).format(\"0,0\")}</td>\r\n            </tr>\r\n            {props.countries.map((country) => (\r\n                <tr>\r\n                    <td>{country.country}</td>\r\n                    <td>{numeral(country.cases).format(\"0,0\")}</td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, {useState, useEffect} from 'react'\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from \"numeral\"\r\nimport { casesTypeColors } from './main'\r\n\r\nconst options = {\r\n    legend:{\r\n        display: false,\r\n    },\r\n    elements: {\r\n        points: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function(tooltipItem, data){\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: 'll',\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function(value, index, values){\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    }\r\n}\r\n\r\n\r\nfunction LineGraph({type, countryCode}) {\r\n    const [data, setData] = useState({});\r\n    const [obtained, setObtained] = useState(true)\r\n\r\n    const buildChartData = (data, type) => {\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n\r\n        for(let date in data[type]){\r\n            if(lastDataPoint){\r\n                const newPoint = {\r\n                    x: date,\r\n                    y: data[type][date]- lastDataPoint\r\n                } \r\n                chartData.push(newPoint)\r\n            }\r\n            lastDataPoint = data[type][date]\r\n            \r\n        }\r\n        return chartData;\r\n    }\r\n    \r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const url = countryCode === 'worldwide' \r\n\t\t\t\t\t\t? \"https://disease.sh/v3/covid-19/historical/all?lastdays=60\"\r\n\t\t\t\t\t\t: `https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=60`;\r\n            await fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if(Object.keys(data).length === 1){\r\n                    setObtained(false);\r\n                } else{\r\n                    if(countryCode === 'worldwide') setData(buildChartData(data, type))\r\n                    else setData(buildChartData(data['timeline'], type))\r\n                    setObtained(true)\r\n                }\r\n            })\r\n        }\r\n        fetchData();\r\n    }, [type, countryCode]);\r\n\r\n    return (\r\n        <div>\r\n            {data.length > 0 && obtained ? (\r\n                <Line\r\n                    options={options}\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: casesTypeColors[type].color,\r\n                                // backgroundColor: \"rgba(204, 16, 52, 0.4)\",\r\n                                borderColor: casesTypeColors[type].hex,\r\n                                data: data,\r\n                            },\r\n                        ]\r\n                    }}\r\n                ></Line>\r\n            ) : (\r\n                <h3 className='no_data'>There is no data for the last 60 days</h3>\r\n            )}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { MenuItem, FormControl, Select, Card, CardContent, Typography} from '@material-ui/core';  \nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table'\nimport { sortData } from './main'\nimport LineGraph from './LineGraph';\nimport numeral from 'numeral'\nimport \"leaflet/dist/leaflet.css\"\nimport { casesTypeColors } from './main'\n\nfunction App() {\n\tconst [countries, setCountries] = useState([])\n\tconst [country, setCountry] = useState(\"worldwide\")\n\tconst [info, setInfo] = useState({})\n\tconst [tableData, setTableData] = useState([])\n\tconst [mapCenter, setMapCenter] = useState({lat: 21, lng: 105.8})\n\tconst [mapZoom, setMapZoom] = useState(3)\n\t// const [dataUrl, setDataUrl] = useState(\"https://disease.sh/v3/covid-19/historical/VNM?lastdays=120\")\n\tconst [dataUrl, setDataUrl] = useState(\"https://disease.sh/v3/covid-19/historical/all?lastdays=60\")\n\tconst [mapCountries, setMapCountries] = useState([])\n\tconst [caseType, setCaseType] = useState('cases')\n\tconst [worldWideCases, setWorldWideCases] = useState(0)\n\n\tuseEffect(() => {\n\t\tconst getCountriesData = async () => {\n\t\t\tawait fetch('https://disease.sh/v3/covid-19/countries')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tconst countries = data.map((country) => (\n\t\t\t\t\t{\n\t\t\t\t\t\tname: country.country,\n\t\t\t\t\t\tcode: country.countryInfo.iso3,\n\t\t\t\t\t\tflag: country.countryInfo.flag\n\t\t\t\t\t}\n\t\t\t\t))\n\t\t\t\tsetMapCountries(data)\n\t\t\t\tsetCountries(countries)\n\t\t\t\tsetTableData(sortData(data))\n\t\t\t})\n\n\t\t\tawait fetch('https://disease.sh/v3/covid-19/all')\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tsetInfo(data)\n\t\t\t\tsetWorldWideCases(data['cases'])\n\t\t\t})\n\t\t}\n\t\tgetCountriesData()\n\t}, [])\n\n\tconst countryChange = async (event) => {\n\t\tconst countryCode = event.target.value;\n\t\tsetCountry(countryCode)\n\n\t\tconst url = countryCode === 'worldwide' \n\t\t\t\t\t? \"https://disease.sh/v3/covid-19/all\" \n\t\t\t\t\t: `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\t\t\n\t\tawait fetch(url)\n\t\t.then(response => response.json())\n\t\t.then(data => {\n\t\t\tsetInfo(data)\n\t\t\tif(countryCode !== 'worldwide'){\n\t\t\t\tsetMapCenter([\n\t\t\t\t\tdata.countryInfo.lat,\n\t\t\t\t\tdata.countryInfo.long\n\t\t\t\t])\n\t\t\t\tsetMapZoom(4)\n\t\t\t}\n\t\t})\n\t}\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div className='app_left'>\n\t\t\t\t<div className='app_header'>\n\t\t\t\t\t<div className='app_title'><h1>Covid 19 Tracker</h1></div>\n\t\t\t\t\t<FormControl className='app_dropdown'>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t\tvalue={country}\n\t\t\t\t\t\t\tonChange={countryChange}\n\t\t\t\t\t\t\tclassName='country_option'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<MenuItem value='worldwide'>World Wide</MenuItem>\n\t\t\t\t\t\t\t{countries.map((country) => (\n\t\t\t\t\t\t\t\t<MenuItem value={country.code}>{country.name}<img className='country_flag' src={country.flag}></img>\n\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div> {/* app header */}\n\n\t\t\t\t<div className='statistics'>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tcaseColor={casesTypeColors['cases'].hex}\n\t\t\t\t\t\tisRed={caseType === 'cases'}\n\t\t\t\t\t\tisGreen={false}\n\t\t\t\t\t\tonClick={(e) => setCaseType('cases')}\n\t\t\t\t\t\ttitle='Coronavirus Cases'\n\t\t\t\t\t\tincrement={numeral(info.todayCases).format(\"0,0\")}\n\t\t\t\t\t\ttotal={numeral(info.cases).format(\"0a\")}\n\t\t\t\t\t></InfoBox>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tcaseColor={casesTypeColors['recovered'].hex}\n\t\t\t\t\t\tisRed={false}\n\t\t\t\t\t\tisGreen={caseType === 'recovered'}\n\t\t\t\t\t\tonClick={(e) => setCaseType('recovered')}\n\t\t\t\t\t\ttitle='Recovered'\n\t\t\t\t\t\tincrement={numeral(info.todayRecovered).format(\"0,0\")}\n\t\t\t\t\t\ttotal={numeral(info.recovered).format(\"0a\")}\n\t\t\t\t\t></InfoBox>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tcaseColor={casesTypeColors['deaths'].hex}\n\t\t\t\t\t\tisRed={caseType === 'deaths'}\n\t\t\t\t\t\tisGreen={false}\t\t\n\t\t\t\t\t\tonClick={(e) => setCaseType('deaths')}\n\t\t\t\t\t\ttitle='Deaths'\n\t\t\t\t\t\tincrement={numeral(info.todayDeaths).format(\"0,0\")}\n\t\t\t\t\t\ttotal={numeral(info.deaths).format(\"0a\")}\n\t\t\t\t\t></InfoBox>\n\t\t\t\t</div>\n\n\t\t\t\t<Map\n\t\t\t\t\tcountries={mapCountries}\n\t\t\t\t\ttype={caseType}\n\t\t\t\t\tcenter={mapCenter}\n\t\t\t\t\tzoom={mapZoom}\n\t\t\t\t></Map>\n\t\t\t</div>{/* app left */}\n\t\t\t<Card className='app_right'>\n\t\t\t\t<CardContent>\n\t\t\t\t\t<h3 style={{fontSize: '24px'}}>Live Cases by Countries</h3>\n\t\t\t\t\t<Table countries={tableData} worldTotal={worldWideCases}></Table>\n\n\t\t\t\t\t<h3 className='graph_title'>{country === 'worldwide' ? 'Worldwide' : info.country} <span style={{color: casesTypeColors[caseType].hex}}>{caseType}</span> in last 60 days</h3>\n\t\t\t\t\t<LineGraph\n\t\t\t\t\t\ttype={caseType}\n\t\t\t\t\t\tcountryCode={country}\n\t\t\t\t\t></LineGraph>\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}